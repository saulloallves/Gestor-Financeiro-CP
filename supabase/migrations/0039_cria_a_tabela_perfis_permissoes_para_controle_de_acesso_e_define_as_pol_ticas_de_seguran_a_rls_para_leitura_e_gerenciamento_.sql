-- Criar a tabela para armazenar as permissões
CREATE TABLE public.perfis_permissoes (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    perfil public.perfil_usuario_enum,
    equipe_id uuid REFERENCES public.equipes(id) ON DELETE CASCADE,
    recurso text NOT NULL,
    permitido boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT pelo_menos_um_escopo CHECK (perfil IS NOT NULL OR equipe_id IS NOT NULL),
    CONSTRAINT regra_unica UNIQUE (perfil, equipe_id, recurso)
);

-- Adicionar comentários para documentação
COMMENT ON TABLE public.perfis_permissoes IS 'Tabela central para controle de acesso baseado em perfis e equipes.';
COMMENT ON COLUMN public.perfis_permissoes.recurso IS 'Identificador único do recurso (ex: "sidebar:cobrancas", "botao:excluir_usuario").';
COMMENT ON COLUMN public.perfis_permissoes.permitido IS 'Define se a permissão é concedida (true) ou negada (false).';

-- Habilitar Row Level Security (RLS)
ALTER TABLE public.perfis_permissoes ENABLE ROW LEVEL SECURITY;

-- Política de Leitura: Permitir que todos os usuários internos autenticados leiam as permissões.
-- Isso é necessário para que o frontend possa construir a UI corretamente.
CREATE POLICY "Permitir leitura para usuários internos"
ON public.perfis_permissoes
FOR SELECT
TO authenticated
USING (is_internal_user(auth.uid()));

-- Política de Gerenciamento: Permitir que apenas administradores possam criar, atualizar ou deletar permissões.
CREATE POLICY "Permitir gerenciamento para admins"
ON public.perfis_permissoes
FOR ALL
TO authenticated
USING ((SELECT perfil FROM public.usuarios_internos WHERE user_id = auth.uid()) = 'admin'::perfil_usuario_enum)
WITH CHECK ((SELECT perfil FROM public.usuarios_internos WHERE user_id = auth.uid()) = 'admin'::perfil_usuario_enum);