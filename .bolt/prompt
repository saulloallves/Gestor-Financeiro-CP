---
applyTo: '**'
---

### **1. Visão Geral do Projeto**

Estamos construindo a **"Central Financeira Autônoma com IA"**. É um sistema de gestão de cobranças e contas a receber para uma rede de franqueados.

* **Objetivo Principal:** Automatizar 90% do processo de cobrança, utilizando uma IA para negociar, enviar boletos e agendar reuniões, visando reduzir a inadimplência e aumentar a eficiência da equipe.
* **Usuários:** A plataforma terá dois tipos de acesso: um painel administrativo para a equipe interna (Cobrança, Gestão) e um portal de autoatendimento para os franqueados.
* **Tecnologia Core:** O frontend é um SPA (Single Page Application) em **React com Vite e TypeScript**, e o backend é a plataforma **Supabase**.

### **2. Stack de Tecnologias Principal**

Ao gerar código, priorize sempre o uso das seguintes bibliotecas e ferramentas:

* **UI Components:** **Material UI (MUI)**. **REGRA DE OURO:** Sempre use componentes do MUI (`<Button>`, `<Card>`, `<TextField>`, `<DataGrid>`) para construir a interface. Não use tags HTML puras (como `<button>`) para elementos de UI.
* **Estado do Servidor:** **TanStack Query (React Query)**. Toda busca e mutação de dados do Supabase deve ser gerenciada através dos hooks `useQuery` e `useMutation`. Isso garante caching, revalidação e um controle de estado de loading/error eficiente.
* **Estado Global (Cliente):** **Zustand**. Para estado global simples que não vem do servidor (ex: dados do usuário logado, estado da UI como menus), use Zustand pela sua simplicidade.
* **Formulários:** A combinação de **React Hook Form** (`useForm`) para o gerenciamento do estado dos formulários e **Zod** para a validação dos schemas.
* **Ícones:** Use a biblioteca **lucide-react**.
* **Notificações:** Use a biblioteca **react-hot-toast**.
* **Roteamento:** Use **react-router-dom**.
* **Backend Client:** Use o cliente **@supabase/supabase-js** para todas as interações com o banco de dados e as funções do Supabase.

### **3. Sistema de Design e Estilização (MUITO IMPORTANTE)**

Toda a identidade visual do projeto é controlada por um único arquivo de tema.

* **Arquivo Central:** `src/styles/theme.ts`.
* **Fonte Principal:** **Poppins**. A tipografia já está configurada neste arquivo.
* **Cores:** Todas as cores da marca (primary, secondary, error, etc.) estão definidas na `palette` do tema.

**Diretrizes de Estilização (Regras Inquebráveis):**

1.  **NUNCA use cores hard-coded** no código (ex: `color: '#FFF'`, `background: 'red'`).
2.  **SEMPRE use as cores do tema**. Exemplo: `sx={{ color: 'primary.main' }}` ou `sx={{ backgroundColor: 'error.dark' }}`.
3.  Para estilização, **priorize o uso da prop `sx`** do MUI para overrides pontuais.
4.  Para espaçamento, **SEMPRE use a função de espaçamento do tema**: `sx={{ padding: theme.spacing(2) }}`. Não use valores fixos como `'16px'`.
5.  A fonte Poppins já é o padrão. Use os componentes `<Typography>` do MUI para aplicar os estilos corretos de cabeçalhos e textos (ex: `<Typography variant="h1">`).

### **4. Padrões de Código e Estrutura**

Siga rigorosamente a estrutura de pastas pré-definida:

* **`/pages`**: Componentes de página inteira, ligados a uma rota.
* **`/components`**: Componentes reutilizáveis.
    * `/components/ui`: Componentes genéricos (ex: um `StyledCard` customizado).
    * `/components/layout`: Componentes de estrutura (ex: `Sidebar`, `Navbar`).
* **`/api`**: Toda a lógica de chamada a APIs externas (Supabase, Asaas, etc.).
* **`/hooks`**: Hooks customizados para lógica reutilizável.
* **`/types`**: Todas as interfaces e tipos do TypeScript. Seja rigoroso com a tipagem.
* **`/store`**: Nossos stores do Zustand.
* **Nomeclatura:** Use `PascalCase` para nomes de arquivos e componentes React (ex: `CobrancasPage.tsx`) e `camelCase` para funções e variáveis.

### **5. Exemplo de um "Bom Componente"**

O exemplo abaixo segue todas as nossas regras. Use-o como referência para o estilo de código esperado.

```tsx
import { Box, Button, Typography, Card } from '@mui/material';
import { AlertCircle } from 'lucide-react';
import { useTheme } from '@mui/material/styles';

// Tipagem das props na pasta /types/alerta.ts
interface AlertaProps {
  titulo: string;
  mensagem: string;
  onConfirmar: () => void;
}

// O componente em si, poderia ficar em /components/ui/Alerta.tsx
export function Alerta({ titulo, mensagem, onConfirmar }: AlertaProps) {
  const theme = useTheme(); // Acesso ao tema para espaçamento

  return (
    <Card sx={{ padding: theme.spacing(3), backgroundColor: 'background.paper' }}>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
        <AlertCircle color={theme.palette.warning.main} />
        <Typography variant="h6" component="h2" sx={{ color: 'text.primary' }}>
          {titulo}
        </Typography>
      </Box>
      <Typography variant="body2" sx={{ marginY: 2, color: 'text.secondary' }}>
        {mensagem}
      </Typography>
      <Button 
        variant="contained" 
        color="primary" 
        onClick={onConfirmar}
      >
        Confirmar
      </Button>
    </Card>
  );
}
```

### **6. Dicas para o Desenvolvimento**

1. **Consistência é chave.** Siga as regras de estilização e estrutura à risca.
2. **Componentização.** Se um pedaço de UI se repete, crie um componente reutilizável.
3. **Tipagem rigorosa.** Sempre defina tipos e interfaces para props, estados e dados.
4. **Documentação.** Comente partes complexas do código para facilitar a manutenção futura.
5. **Testes.** Sempre que possível, escreva testes unitários para componentes críticos.
6. **Revisão de Código.** Antes de finalizar uma feature, revise o código para garantir que todas as diretrizes foram seguidas.
7. **IDE** Ao executar comando no terminal, sempre utilize o operador ";" e não "&&" pois o terminal do Windows não reconhece o "&&", além disso não execute o comando "npm run dev" no terminal do VSCode pois eu já vou estar rodando o projeto no meu computador para testar, só faça isso se eu solicitar.
8. **Supabase** Ao executar comando do supabase CLI, sempre utilize o comando ``supabase`` e não ``npx supabase`` pois eu tenho o supabase CLI instalado globalmente na minha máquina.

### **7. Git e Commits**

Siga essas diretrizes para versão e commits:
- **Versionamento Semântico (SemVer):** Todas as versões estáveis da aplicação serão marcadas seguindo o padrão `MAJOR.MINOR.PATCH` (ex: `v1.0.0`, `v1.2.1`).
- **Controle de Versão com Git/GitHub:**
    - **Branch `main`:** Contém o código de produção, sempre estável. Apenas versões testadas e marcadas com uma tag podem ser mescladas aqui.
    - **Branch `develop`:** Branch principal de desenvolvimento, onde as novas funcionalidades são integradas.
    - **Tags do Git:** Cada deploy em produção será associado a uma tag imutável no Git (ex: `git tag -a v1.2.0 -m "Release 1.2.0"`). Isso nos dá um ponto de restauração exato e confiável.
- **Mensagens de Commit:** Use mensagens claras e descritivas. Exemplo: `feat: adicionar funcionalidade de filtro na lista de cobranças`, `fix: corrigir bug na validação do formulário de login`.

### **8. Comunicação e Feedback**

Para garantir que o desenvolvimento esteja alinhado com as expectativas, mantenha uma comunicação constante. Se surgir qualquer dúvida ou se algo não estiver claro, pergunte imediatamente. Feedbacks regulares são essenciais para o sucesso do projeto.

### **9. Schemas de Tabelas no Supabase**

Sempre siga o schema que está sendo construído via Supabase. Não crie novas tabelas ou campos sem antes consultar o schema atual nas migrations e toda alteração deve ser feita via CLI do Supabase, para garantir a integridade do banco de dados.